<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>我的git笔记</title>
      <link href="/2018/06/01/%E6%88%91%E7%9A%84git%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/06/01/%E6%88%91%E7%9A%84git%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h5 id="1-创建版本库"><a href="#1-创建版本库" class="headerlink" title="1. 创建版本库"></a>1. 创建版本库</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mkdir gitDemo <span class="comment">//创建一个文件夹</span></span><br><span class="line"></span><br><span class="line">pwd <span class="comment">//查看当前路径 /Users/wangguibin/Desktop/gitDemo</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">init</span> <span class="comment">//创建一个版本库</span></span><br><span class="line"><span class="comment">//Initialized empty Git repository in /Users/wangguibin/Desktop/gitDemo/.git/</span></span><br><span class="line"></span><br><span class="line">ls -ah <span class="comment">//查看当前目录中的隐藏文件 .git</span></span><br><span class="line"><span class="comment">//....git</span></span><br><span class="line"></span><br><span class="line">touch readme.txt <span class="comment">//创建一个文本</span></span><br><span class="line">vi readme.txt <span class="comment">//修改文本内容</span></span><br></pre></td></tr></table></figure><a id="more"></a><h5 id="2-修改的文件或者创建的新文件提交到版本仓库"><a href="#2-修改的文件或者创建的新文件提交到版本仓库" class="headerlink" title="2. 修改的文件或者创建的新文件提交到版本仓库"></a>2. 修改的文件或者创建的新文件提交到版本仓库</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">git add  readme.txt <span class="comment">//添加到版本库</span></span><br><span class="line"><span class="comment">//一般添加成功不会有任何提示</span></span><br><span class="line">git commit -m <span class="string">"first update readme file git is 666"</span> <span class="comment">// -m 后面的字符串是log日志信息,提交了啥改了啥说明一下,便于管理</span></span><br><span class="line"></span><br><span class="line">提交成功有以下提示信息: </span><br><span class="line">[master (root-commit) 4acf248] first update readme file git <span class="keyword">is</span> <span class="number">666</span></span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">5</span> insertions(+)</span><br><span class="line"> create mode <span class="number">100644</span> readme.txt</span><br><span class="line"></span><br><span class="line">(<span class="type">PS</span>.可以一次添加多个文件,一次性提交)</span><br><span class="line">****************************************</span><br><span class="line">$ git add file1.txt</span><br><span class="line">$ git add file2.txt file3.txt</span><br><span class="line">$ git commit -m <span class="string">"add 3 files."</span></span><br><span class="line">**********************************************</span><br><span class="line"> 错误❌示范</span><br><span class="line"> git commit -a <span class="string">"提交readme.txt的最近更新"</span></span><br><span class="line">fatal: <span class="type">Paths</span> with -a does not make sense.</span><br><span class="line"></span><br><span class="line">正确✅姿势</span><br><span class="line">git commit -a -m <span class="string">"提交readme.txt的最近更新"</span></span><br><span class="line">[master ec855f8] 提交readme.txt的最近更新</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">5</span> insertions(+)</span><br></pre></td></tr></table></figure><h5 id="3-查看是否有更改未提交的情况git-status"><a href="#3-查看是否有更改未提交的情况git-status" class="headerlink" title="3. 查看是否有更改未提交的情况git status"></a>3. 查看是否有更改未提交的情况<code>git status</code></h5><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">git diff readme.txt<span class="comment">///查看文件被修改部分内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">///没有更改,没有需要添加提交的地方</span></span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">nothing to commit, working tree clean</span><br><span class="line"></span><br><span class="line"><span class="comment">///需要添加和提交, 666.txt这个文件被修改了 ,没有提交</span></span><br><span class="line">git status</span><br><span class="line">On branch master</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">modified:   <span class="number">666.</span>txt</span><br><span class="line"></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">///直接提交就好啦,不过这个 "git commit -a"操作也是可以的提交所有 , -m 是message的缩写,后面接一段说明文字</span></span><br><span class="line">git add <span class="number">666.</span>txt</span><br><span class="line">git commit -m <span class="string">"修改了666.txt"</span></span><br><span class="line">[master <span class="number">1</span>a46406] 修改了<span class="number">666.</span>txt</span><br><span class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</span><br><span class="line"> </span><br><span class="line">git log <span class="comment">//查看提交的日志</span></span><br></pre></td></tr></table></figure><h5 id="4-版本回退"><a href="#4-版本回退" class="headerlink" title="4. 版本回退"></a>4. 版本回退</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//跳到哪一个版本,秒秒钟的事,切一下头指针就ok,类似于链表的操作</span></span><br><span class="line">git log --pretty=oneline <span class="comment">//查看节点id和提交信息</span></span><br><span class="line">ec855f8114fced47737b61e8abfaa9fb5949a1ac (<span class="type">HEAD</span> -&gt; master) 提交readme.txt的最近更新</span><br><span class="line">1a46406038a5f50bd48a19daa38c599a6ff92fb6 修改了<span class="number">666</span>.txt</span><br><span class="line">6b064208d5b992866cc1cc21cfd1b416e6b22258 commit <span class="number">666</span>.txt</span><br><span class="line">4acf24867379120ae1fdfcc9521b0996ad863ae2 first update readme file git <span class="keyword">is</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">目前<span class="type">HEAD</span>-&gt;master指向了<span class="string">"提交最近更新"</span>,就是我刚刚提交的</span><br><span class="line">下面那几个越往下,提交的时间越早...</span><br><span class="line"> git reset --hard <span class="type">HEAD</span>^ <span class="comment">//回滚上一个版本,回滚到上上个则 HEAD^^,以此类推往回回滚100次则很难数得清楚^的个数可以写成 HEAD~100 这样</span></span><br><span class="line">git reset --hard commit_id <span class="comment">///提交id不用填写完整,前面几位就可以</span></span><br><span class="line"></span><br><span class="line">git reflog <span class="comment">///查看commit_id和提交历史记录</span></span><br><span class="line">git reflog</span><br><span class="line">ec855f8 (<span class="type">HEAD</span> -&gt; master) <span class="type">HEAD</span>@&#123;<span class="number">0</span>&#125;: commit: 提交readme.txt的最近更新</span><br><span class="line">1a46406 <span class="type">HEAD</span>@&#123;<span class="number">1</span>&#125;: commit: 修改了<span class="number">666</span>.txt</span><br><span class="line">6b06420 <span class="type">HEAD</span>@&#123;<span class="number">2</span>&#125;: commit: commit <span class="number">666</span>.txt</span><br><span class="line">4acf248 <span class="type">HEAD</span>@&#123;<span class="number">3</span>&#125;: commit (initial): first update readme file git <span class="keyword">is</span> <span class="number">666</span></span><br></pre></td></tr></table></figure><h5 id="5-工作区和暂存区-跟踪修改"><a href="#5-工作区和暂存区-跟踪修改" class="headerlink" title="5. 工作区和暂存区,跟踪修改"></a>5. 工作区和暂存区,跟踪修改</h5><p><img src="我的git笔记/WX20180601-140105.png" alt="工作区与暂存区"></p><p><strong>git是如何操作的? 如图,先把修改的文件add到暂存区,然后再执行 git commit,比如有几个文件做了修改,你这个时候可以修改一个就执行add和commit操作,也可以先全部add完再执行一次commit, 建议是开发一个小模块,创建或者修改完就add进去,快下班的时候或者休息的时候翻篇的时候,就执行一次commit操作,不然这个容易忘记,还有模块与模块之间,开发周期与开发周期时间和时机的不同, 尽可能开发一部分就提交一部分,免得积攒大量的任务.. 节点多意味着更加灵活,后续想滚到哪里就滚到哪里…</strong></p><h5 id="6-撤销修改"><a href="#6-撤销修改" class="headerlink" title="6. 撤销修改"></a>6. 撤销修改</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">场景<span class="number">1</span>：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。</span><br><span class="line"></span><br><span class="line">场景<span class="number">2</span>：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset <span class="type">HEAD</span> file，就回到了场景<span class="number">1</span>，第二步按场景<span class="number">1</span>操作。</span><br><span class="line"></span><br><span class="line">场景<span class="number">3</span>：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库</span><br></pre></td></tr></table></figure><h5 id="7-生成ssh-key"><a href="#7-生成ssh-key" class="headerlink" title="7.  生成ssh key"></a>7.  生成ssh key</h5><p><a href="http://blog.csdn.net/makenothing/article/details/8450417" target="_blank" rel="noopener">参考博客</a><br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 检查是否有ssh key</span></span><br><span class="line"> cd ~/.ssh 查看这个目录下的文件</span><br><span class="line"> <span class="comment">///2. 生成key</span></span><br><span class="line"> ssh-keygen -t rsa -<span class="type">C</span> <span class="string">"you email@email.com"</span> 或者去掉 －t rsa</span><br><span class="line"> <span class="comment">///3. 拷贝公钥,设置好对应的key github或者使用的站点</span></span><br><span class="line"> cat ~/.ssh/id_rsa.pub  查看并拷贝到到git添加设置key</span><br><span class="line"><span class="comment">///或者用命令添加到剪贴板</span></span><br><span class="line">pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment">///4. 测试一下这个ssh能不能使用</span></span><br><span class="line">ssh -<span class="type">T</span> git@github.com</span><br></pre></td></tr></table></figure></p><h5 id="8-拉取远程库"><a href="#8-拉取远程库" class="headerlink" title="8.  拉取远程库"></a>8.  拉取远程库</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">///刻隆下来</span></span><br><span class="line"><span class="comment">///1.cd 到要存储的目录下</span></span><br><span class="line"><span class="comment">///2. 执行 git clone + 链接 </span></span><br><span class="line">git clone https:<span class="comment">//github.com/WangGuibin/WGBTagViewDemo.git</span></span><br><span class="line"><span class="comment">////git fetch</span></span><br><span class="line">git fetch：相当于是从远程获取最新版本到本地，不会自动merge</span><br><span class="line">git fetch origin master</span><br><span class="line">git log -p master..origin/master</span><br><span class="line">git merge origin/master</span><br><span class="line"></span><br><span class="line">git fetch origin master:tmp</span><br><span class="line">git diff tmp </span><br><span class="line">git merge tmp</span><br><span class="line"><span class="comment">////git pull</span></span><br><span class="line">git pull：相当于是从远程获取最新版本并merge到本地</span><br><span class="line">git pull origin master</span><br></pre></td></tr></table></figure><h5 id="9-推送到远程库"><a href="#9-推送到远程库" class="headerlink" title="9.  推送到远程库"></a>9.  推送到远程库</h5><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br></pre></td></tr></table></figure><p><a href="http://www.cnblogs.com/springbarley/archive/2012/11/03/2752984.html" target="_blank" rel="noopener">git删除,分支,打tag,拉取和推送远程库参考命令</a></p><h4 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Git鼓励大量使用分支：</span><br><span class="line"></span><br><span class="line">查看分支：git branch</span><br><span class="line"></span><br><span class="line">创建分支：git branch &lt;name&gt;</span><br><span class="line"></span><br><span class="line">切换分支：git checkout &lt;name&gt;</span><br><span class="line"></span><br><span class="line">创建+切换分支：git checkout -b &lt;name&gt;</span><br><span class="line"></span><br><span class="line">合并某分支到当前分支：git merge &lt;name&gt;</span><br><span class="line"></span><br><span class="line">删除分支：git branch -d &lt;name&gt;</span><br></pre></td></tr></table></figure><h3 id="打tag"><a href="#打tag" class="headerlink" title="打tag"></a>打tag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">命令git tag &lt;name&gt;用于新建一个标签，默认为HEAD，也可以指定一个commit id；</span><br><span class="line"></span><br><span class="line">git tag -a &lt;tagname&gt; -m &quot;blablabla...&quot;可以指定标签信息；</span><br><span class="line"></span><br><span class="line">git tag -s &lt;tagname&gt; -m &quot;blablabla...&quot;可以用PGP签名标签；</span><br><span class="line"></span><br><span class="line">命令git tag可以查看所有标签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">命令git push origin &lt;tagname&gt;可以推送一个本地标签；</span><br><span class="line"></span><br><span class="line">命令git push origin --tags可以推送全部未推送过的本地标签；</span><br><span class="line"></span><br><span class="line">命令git tag -d &lt;tagname&gt;可以删除一个本地标签；</span><br><span class="line"></span><br><span class="line">命令git push origin :refs/tags/&lt;tagname&gt;可以删除一个远程标签。</span><br></pre></td></tr></table></figure><h3 id="记录一次实战操作步骤"><a href="#记录一次实战操作步骤" class="headerlink" title="记录一次实战操作步骤"></a>记录一次实战操作步骤</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">// cd Desktop 进入桌面创建一个文件夹</span><br><span class="line"> <span class="attribute">mkdir</span> WGBGitTest</span><br><span class="line"> <span class="attribute">cd</span>  WGBGitTest // 进入文件夹</span><br><span class="line"> <span class="attribute">git</span> init //实例化git</span><br><span class="line"> <span class="attribute">touch</span> wgb.txt //创建文件,编辑文件,查看文件....</span><br><span class="line"> //添加到暂存区</span><br><span class="line"> <span class="attribute">git</span> add . 或者 git add wgb.txt</span><br><span class="line"> //提交给git</span><br><span class="line"> <span class="attribute">git</span> commit -m<span class="string">"logMsg"</span></span><br><span class="line"> //打上tag</span><br><span class="line"> <span class="attribute">git</span> tag tagName</span><br><span class="line"> //推送远端</span><br><span class="line"> <span class="attribute">git</span> push origin tagName</span><br><span class="line"> </span><br><span class="line"> // 开分支 从旧的分支分一个旁路分支进行操作 并切换到子分支进行开发</span><br><span class="line"> <span class="attribute">git</span> checkout -b  newBranchName</span><br><span class="line"> </span><br><span class="line"> // 切换到子分支进行开发</span><br><span class="line"> <span class="attribute">git</span> checkout  branchName</span><br><span class="line"> </span><br><span class="line"> // 此时子分支拥有当前master的一切的基础上进行修改,肆意妄为,改动一大波之后,按部就班提交代码到git</span><br><span class="line"> <span class="attribute">git</span> add XXX  / git commit -m<span class="string">"XXX"</span> </span><br><span class="line"> </span><br><span class="line">// 希望得到master的认可,master看了代码之后觉得ok,同意接受子分支的代码,于是切换回master分支进行分支合并</span><br><span class="line"><span class="attribute">git</span> checkout master //回到主分支</span><br><span class="line"><span class="attribute">git</span> merge --no-ff  branchName //合并子分支 加--no-ff 参数显示提交细节,不加的话相当于跳过子分支的提交细节</span><br><span class="line"></span><br><span class="line">// 也可删除子分支</span><br><span class="line"><span class="attribute">git</span> branch -d branchName</span><br><span class="line"></span><br><span class="line">//一波操作</span><br><span class="line"><span class="attribute">git</span> add XXX /git commit -m<span class="string">"XXXX"</span></span><br><span class="line">// 打上tag</span><br><span class="line"><span class="attribute">git</span> tag tagName001</span><br><span class="line">//查看tag</span><br><span class="line"><span class="attribute">git</span> tag</span><br><span class="line">// 删除tag </span><br><span class="line"><span class="attribute">git</span> tag -d tagName commitID</span><br><span class="line">// 查看log信息</span><br><span class="line"><span class="attribute">git</span> reflog </span><br><span class="line">// 推送远端</span><br><span class="line"><span class="attribute">git</span> push origin --tags // 全部未提交的一起上去</span><br></pre></td></tr></table></figure><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">/// 生动形象查看git log</span><br><span class="line">git log --graph 或者</span><br><span class="line">git log --graph --pretty=oneline --abbrev-commit</span><br><span class="line"></span><br><span class="line">git add . 或者 git add &lt;filename&gt;</span><br><span class="line"></span><br><span class="line">git commit –m &quot;项目描述&quot;</span><br><span class="line"></span><br><span class="line">要关联一个远程库，使用命令</span><br><span class="line">git remote add origin git@server-name:path/repo-name.git；</span><br><span class="line"></span><br><span class="line">关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</span><br><span class="line"></span><br><span class="line">此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</span><br><span class="line"></span><br><span class="line">// 本地分支推送到服务端,并远程建立一个新分支</span><br><span class="line">  git push origin  branchName :branchName</span><br><span class="line">//删除分支</span><br><span class="line">git branch -D branchName (本地)</span><br><span class="line">git push origin  :branchName</span><br><span class="line">// 删除标签</span><br><span class="line">git tag -d tagName</span><br><span class="line">git push origin :refs/tags/tagName</span><br></pre></td></tr></table></figure><h3 id="放弃当前本地修改-强制拉取远程库最新的更新"><a href="#放弃当前本地修改-强制拉取远程库最新的更新" class="headerlink" title="放弃当前本地修改,强制拉取远程库最新的更新"></a>放弃当前本地修改,强制拉取远程库最新的更新</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master</span><br><span class="line">git pull <span class="comment">//可以省略</span></span><br></pre></td></tr></table></figure><h3 id="alias-grep-git-调用zsh的插件-git-缩写"><a href="#alias-grep-git-调用zsh的插件-git-缩写" class="headerlink" title="alias | grep git 调用zsh的插件 git 缩写"></a><code>alias | grep git</code> 调用zsh的插件 git 缩写</h3><p><code>ga</code> =<code>git add</code><br><code>gaa</code>=<code>git add --all</code><br><code>gb</code>= <code>git branch</code><br><code>gcam</code>=<code>git commit -a -m</code><br><code>gcb</code>= <code>git checkout -b</code><br><code>gco</code>=<code>git checkout</code><br><code>gm --no-ff</code>=<code>git merge --no-ff</code><br><code>gcmsg</code>=<code>git commit -m</code><br><code>gpoat</code>=<code>git push origin --all &amp;&amp; git push origin --tags</code></p><p><code>gfa</code> = <code>git fetch --all --prune</code><br><code>grhh</code>= <code>git reset HEAD --hard</code></p><p> <a href="http://blog.jobbole.com/109466/" target="_blank" rel="noopener">深入理解分支的重要性</a><br> <a href="http://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">git命令清单</a></p><h1 id="Debug-遇到的一些各种各样的问题"><a href="#Debug-遇到的一些各种各样的问题" class="headerlink" title="Debug 遇到的一些各种各样的问题"></a>Debug 遇到的一些各种各样的问题</h1><h5 id="1-clone代码的时候遇到如下报错"><a href="#1-clone代码的时候遇到如下报错" class="headerlink" title="1.  clone代码的时候遇到如下报错"></a>1.  clone代码的时候遇到如下报错</h5><p><code>fatal: Authentication failed for &#39;https://gitee.com/iOSCoder-JJMY/JJYSClient.git/&#39;</code><br><em>重新设置用户名和邮箱即可</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;wangguibin&quot;</span><br><span class="line">git config --global user.email &quot;wangguibin@jjys168.com&quot;</span><br></pre></td></tr></table></figure></p><h5 id="2-如果你在主分支-master-上做了修改-子分支-dev-想要同步主分支的修改-那么有以下两种操作"><a href="#2-如果你在主分支-master-上做了修改-子分支-dev-想要同步主分支的修改-那么有以下两种操作" class="headerlink" title="2. 如果你在主分支(master)上做了修改,子分支(dev)想要同步主分支的修改,那么有以下两种操作:"></a>2. 如果你在主分支(master)上做了修改,子分支(dev)想要同步主分支的修改,那么有以下两种操作:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 方式一: git merge 合并分支</span><br><span class="line">git checkout dev #切换到子分支 </span><br><span class="line">git merge master #合并主分支 即让主分支覆盖子分支 拥有主分支的当前所有更新</span><br><span class="line"></span><br><span class="line"># 方式二: git rebase 好像也叫合并分支</span><br><span class="line">git checkout  dev</span><br><span class="line">git rebase master // 将 master 上的修改合并到 dev 分支（当前分支）。</span><br><span class="line">```  </span><br><span class="line">**`rebase` 会将 `dev `上的历史 `commit` 全部修改，并且用新的提交覆盖之。 看起来就是你的 `dev `分支从一个开始就是在最新的 `master` 上开发的( 新的`master`跑到了你分支的最开始处 )**</span><br><span class="line"></span><br><span class="line">/// 如果提交信息写错了而提交了可以修改,命令如下(进入vim编辑):</span><br></pre></td></tr></table></figure><p>git commit –amend<br><code>`</code></p><p><a href="https://segmentfault.com/q/1010000003875183" target="_blank" rel="noopener">1. 合并父子分支更新的参考实例</a></p><p><a href="https://www.cnblogs.com/marblemm/p/7161614.html" target="_blank" rel="noopener">2. merge与rebase的区分和使用</a></p><p><a href="https://backlog.com/git-tutorial/cn/stepup/stepup2_8.html" target="_blank" rel="noopener">3 .猴子🐒都能懂的Git入门教程之使用用rebase</a></p><p><a href="https://www.zhihu.com/question/36509119/answer/131495331" target="_blank" rel="noopener">4. 在开发过程中使用git rebase还是git merge，优缺点分别是什么?</a></p><p><a href="http://blog.csdn.net/gw569453350game/article/details/52536928" target="_blank" rel="noopener">5. git rebase &amp; merge 将其他分支的修改合并到当前分支</a></p><p><a href="https://note.leodev.me/2016/01/08/git-commonly-used-commands/" target="_blank" rel="noopener">6. git常用命令</a></p>]]></content>
      
      <categories>
          
          <category> 技巧篇 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 工具 </tag>
            
            <tag> 效率 </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
